# 知识蒸馏 (KnowLedge Distillation - KD Tool)

**版本:** V2.5
**最后更新:** 2024-05-01

## 1. 项目目标与概览

本项目旨在构建一个**本地化的原始信息治理工具**，帮助用户处理和优化个人知识库或 RAG 应用的源文档。核心目标是通过**知识去重（精确和语义）、冲突检测（未来规划）、通用知识过滤（未来规划）**等手段，在信息进入 LLM 或其他知识库工具前进行精炼，以提高内容质量、降低后续处理的 Token 开销和算力消耗。

**本项目不是知识库工具，不提供问答功能，而是前置的知识治理辅助工具**。

**主要解决的痛点：**
* 个人知识库或 RAG 应用数据量庞大、冗余信息多。
* 文档中可能包含大量通用知识和相互冲突的信息。
* 处理冗余和冲突信息导致不必要的 Token 费用和算力开销。

## 2. 项目架构 (V2.3)

本项目当前采用模块化的命令行界面 (CLI) 架构。

**核心模块:**
* `kd_tool_CLI.py`: 主程序入口，命令行界面交互逻辑，控制整体分析流程 (`KDToolCLI` 类)。
* `constants.py`: 定义全局常量，如模型名称、相似度阈值、文件后缀等。
* `utils.py`: 包含辅助函数，如日志设置、路径处理、文本提取等。
* `md5_analyzer.py`: 处理精确重复内容的逻辑 (`MD5Analyzer` 类)。
* `semantic_analyzer.py`: 处理语义相似内容的逻辑 (`SemanticAnalyzer` 类)，包含性能优化。

**数据流概念 (参考 V2.3 模块职责):**
1.  **文件读取与解析 (`KDToolCLI._read_files`, `_parse_markdown`)**: 读取指定目录的 Markdown 文件，使用 `mistune` 解析内容块。
2.  **MD5 精确去重 (`MD5Analyzer.find_md5_duplicates`)**: 计算块的 MD5 哈希值，识别完全相同的块。
3.  **语义相似分析 (`SemanticAnalyzer.find_semantic_duplicates`)**: (已优化) 对 MD5 唯一的块计算向量嵌入，使用 Sentence Transformer 模型查找语义相似对。
4.  **交互式决策 (`KDToolCLI`, `MD5Analyzer`, `SemanticAnalyzer` 的 `review_*_interactive` 方法)**: 用户通过命令行界面对识别出的重复/相似项进行决策（保留/删除）。
5.  **决策持久化 (`KDToolCLI.load_decisions`, `save_decisions`)**: 加载或保存用户的决策到 JSON 文件 (`kd_decisions.json`)。
6.  **应用决策 (`KDToolCLI.apply_decisions`)**: 根据用户决策生成去重后的 Markdown 文件到输出目录。

**目录结构:**
knowledge-distiller-kd/
├── kd_tool_CLI.py         # 主程序入口
├── constants.py           # 全局常量
├── utils.py               # 辅助函数
├── md5_analyzer.py        # MD5 分析逻辑
└── semantic_analyzer.py   # 语义分析逻辑
├── kd_config/             # (默认) 决策文件目录
│   └── kd_decisions.json  # (默认) 决策文件
└── kd_results/            # (默认) 输出目录
└── ...                # 去重后的文件

### 2.1 设计原则

1. **路径处理原则**：
   - 输入路径：支持相对路径和绝对路径，内部统一转换为绝对路径处理
   - 输出路径：支持相对路径和绝对路径，内部统一转换为绝对路径处理
   - 决策文件路径：支持相对路径和绝对路径，内部统一转换为绝对路径处理
   - 文件引用：在决策文件中使用相对路径，提高可移植性
   - 路径转换：在加载决策时，将相对路径转换为绝对路径；在保存决策时，将绝对路径转换为相对路径

2. **内容处理原则**：
   - Markdown 解析：支持标准的 Markdown 语法，包括内联 HTML
   - HTML 处理：默认跳过 HTML 标签，但提供配置选项允许用户选择是否处理
   - 文本提取：专注于提取纯文本内容，忽略格式信息
   - 编码处理：统一使用 UTF-8 编码处理所有文件

## 3. 技术栈

* **开发语言:** Python 3.12.10
* **核心库:**
    * Markdown 解析: `mistune` (替代了早前提及的 `markdown-it-py`)
    * 精确去重: Python 内置 `hashlib` (MD5)
    * 语义相似度: `sentence-transformers` (模型: `paraphrase-multilingual-mpnet-base-v2` 或通过常量配置)
    * 命令行参数: Python 内置 `argparse`
    * 文件与路径: Python 内置 `pathlib`
    * 日志: Python 内置 `logging`
    * 类型提示: Python 内置 `typing`
* **计划支持 (未来阶段):**
    * PDF 解析: `PyMuPDF`
    * Office 解析: `python-docx`, `openpyxl`
    * 数据存储 (用于更复杂管理): `SQLite`
    * 本地 LLM 集成 (辅助判断): 轻量级模型 + `ollama` 或类似框架
* **GUI (初期规划，当前为 CLI):** `Tkinter`

## 4. 功能说明与使用方法

### 4.1 核心功能

**当前版本 (V2.5 CLI) 主要提供 Markdown 文件的精确去重和语义去重功能。**

* **整体协调 (`KDToolCLI`)**
    * **作用:** 控制分析流程, 管理数据和分析器实例。
    * **关键方法:**
        * `run_analysis()`: 依次执行读取、解析、MD5、语义分析的完整流程。
            * *参数:* 无 (通过实例属性配置输入/输出路径等)。
            * *返回:* `bool` (分析是否成功启动和完成基本步骤)。
            * *类型提示:* 已添加完整的类型注解和文档字符串。
        * `_read_files()`: 读取指定输入目录的 Markdown 文件内容。
            * *类型提示:* 已添加返回类型 `bool` 和详细文档。
        * `_parse_markdown()`: 使用 `mistune` 解析 Markdown 文件, 提取内容块（当前版本排除标题）。
            * *类型提示:* 已添加返回类型 `bool` 和详细文档。
        * `load_decisions()`: 从 JSON 文件加载决策。
            * *参数:* 无 (通过实例属性配置决策文件路径)。
            * *返回:* `bool` (加载是否成功)。
            * *类型提示:* 已添加返回类型 `bool` 和详细文档。
            * *路径处理:* 自动将决策文件中的相对路径转换为绝对路径。
        * `save_decisions()`: 将内存中的决策保存到 JSON 文件。
            * *参数:* 无 (通过实例属性配置决策文件路径)。
            * *返回:* `bool` (保存是否成功)。
            * *类型提示:* 已添加返回类型 `bool` 和详细文档。
            * *路径处理:* 自动将绝对路径转换为相对路径保存。
        * `apply_decisions()`: 根据决策生成去重后的 Markdown 文件。
            * *类型提示:* 已添加返回类型 `bool` 和详细文档。

* **MD5 精确去重 (`MD5Analyzer`)**
    * **作用:** 处理完全相同的内容块。
    * **关键方法:**
        * `find_md5_duplicates()`: 计算哈希值查找完全相同的块。
            * *参数:* 块数据列表。
            * *返回:* 包含重复块组的字典。
            * *类型提示:* 已添加完整的类型注解和文档字符串。
        * `review_md5_duplicates_interactive()`: 提供命令行交互界面让用户处理 MD5 重复组（标记保留/删除）。

* **语义相似分析 (`SemanticAnalyzer`)**
    * **作用:** 处理语义上相似但不完全相同的内容块 (已进行 MD5 优化)。
    * **关键方法:**
        * `load_semantic_model()`: 加载 Sentence Transformer 模型。
            * *类型提示:* 已添加返回类型 `None` 和详细文档。
        * `find_semantic_duplicates()`: (优化后) 仅对唯一的块计算向量并查找相似项。
            * *参数:* 块数据列表, 相似度阈值。
            * *返回:* 语义相似对列表 (包含块信息和相似度得分)。
            * *类型提示:* 已添加完整的类型注解和文档字符串。
        * `review_semantic_duplicates_interactive()`: 提供命令行交互界面让用户处理语义相似对（标记保留/删除）。

### 4.2 快速开始与使用

**环境设置:**
1.  安装 `pyenv` (推荐) 用于管理 Python 版本。
2.  使用 `pyenv` 安装 Python 3.12.10。
3.  克隆本仓库。
4.  在项目根目录创建并激活 Python 虚拟环境:
    ```bash
    python -m venv venv
    source venv/bin/activate  # macOS/Linux
    # venv\Scripts\activate  # Windows
    ```
5.  安装所需依赖 (根据项目实际的 `requirements.txt` 文件，此处为示例):
    ```bash
    pip install sentence-transformers mistune
    ```

**运行程序 (命令行):**
* **使用默认开发路径运行 (硬编码在早期版本或用于调试):**
    ```bash
    python kd_tool_CLI.py
    # 或启用 Debug 日志
    python kd_tool_CLI.py --debug
    ```
* **指定输入/输出/决策文件路径:**
    ```bash
    python kd_tool_CLI.py -i /path/to/your/markdown_files -o /path/to/output_results -d /path/to/your/decisions.json
    ```
* **调整语义相似度阈值 (默认为 0.85):**
    ```bash
    python kd_tool_CLI.py -i ... -t 0.9
    ```
* **跳过语义分析:**
    ```bash
    python kd_tool_CLI.py -i ... --skip-semantic
    ```

**交互处理:**
程序运行分析后会进入交互菜单：
1.  选择 `1` 进入 MD5 重复项处理。
2.  选择 `2` 进入语义相似项处理 (如果未跳过)。
3.  使用菜单提示的命令 (`k`, `d`, `r`, `a`, `keep`, `k1d2`, `k2d1`, `save`, `q` 等) 进行决策。
4.  选择 `3` 加载已保存的决策文件。
5.  选择 `4` 保存当前做出的决策。
6.  选择 `5` 应用当前决策，生成去重文件到输出目录。
7.  选择 `6` 重新分析或退出。

### 4.3 配置文件

* **全局常量:** `constants.py` 文件定义了如默认模型名、默认阈值、默认输出后缀等。
* **用户决策:** 用户的去重决策默认保存在项目根目录下的 `kd_config/kd_decisions.json` 文件中。路径可以通过 `-d` 参数修改。

## 5. 开发规划与优化建议

* **当前状态:** V2.5 已完成代码质量优化和单元测试覆盖，包括：
    * 完整的类型提示和文档字符串
    * 完善的错误处理机制
    * 全面的单元测试覆盖
    * 性能优化和代码结构改进
    * 统一的路径处理机制
    * 灵活的 HTML 处理选项

* **近期规划:**
    * 添加 PDF、Office 文件解析支持
    * 完善用户决策管理（例如，支持更复杂的决策标记）
    * 可能引入 SQLite 进行更持久化和结构化的数据存储
    * 添加集成测试，确保模块间交互的正确性
    * 添加性能测试，优化处理大量文件时的性能
    * 优化路径处理机制，提高可移植性
    * 添加 HTML 处理配置选项

* **远期规划/优化方向:**
    * 探索集成轻量级本地 LLM 辅助冲突检测和内容合并
    * 考虑性能优化，特别是在处理大量文件时（异步处理等）
    * 根据用户反馈，考虑是否需要图形用户界面 (GUI)
    * 通用知识过滤功能的实现

## 6. 测试

### 6.1 测试环境设置

1. 安装开发依赖：
```bash
pip install -r requirements-dev.txt
```

2. 运行测试：
```bash
# 运行所有测试
pytest

# 运行测试并生成覆盖率报告
pytest --cov=. --cov-report=html
```

### 6.2 测试覆盖情况

项目目前包含以下测试文件：

1. `test_kd_tool_cli.py`：
   - 测试 `KDToolCLI` 类的所有公共方法
   - 测试内部方法 `_read_files`、`_parse_markdown`、`_initialize_decisions` 和 `_ensure_dirs_exist`
   - 覆盖正常情况和边界情况
   - 测试文件操作、Markdown 解析、决策管理等核心功能

2. `test_semantic_analyzer.py`：
   - 测试 `SemanticAnalyzer` 类的所有方法
   - 包括模型加载、语义重复检测等功能
   - 测试跳过语义分析的情况

3. `test_md5_analyzer.py`：
   - 测试 `MD5Analyzer` 类的所有方法
   - 包括 MD5 重复检测功能
   - 测试各种内容块的情况

4. `test_utils.py`：
   - 测试所有工具函数
   - 包括日志设置、决策键处理、文本提取等
   - 测试各种边界情况

5. `test_constants.py`：
   - 测试所有常量的定义和类型
   - 确保常量值正确且类型安全

### 6.3 测试最佳实践

1. **单元测试编写规范**：
   - 每个测试函数专注于测试一个特定功能
   - 使用描述性的测试函数名
   - 包含详细的文档字符串，说明测试目的和预期结果
   - 使用 pytest 的 fixture 机制管理测试资源

2. **测试用例设计原则**：
   - 覆盖正常情况和边界情况
   - 测试错误处理和异常情况
   - 使用模拟对象（Mock）隔离外部依赖
   - 保持测试的独立性和可重复性

3. **测试运行和维护**：
   - 定期运行测试套件
   - 在代码修改后运行相关测试
   - 保持测试代码的整洁和可维护性
   - 及时更新测试用例以适应代码变更

## 开发进度记录

### 2024-05-01 测试覆盖完善
完成了项目的全面测试覆盖，主要包括以下改进：

1. 测试文件结构优化
   - 为每个主要模块创建独立的测试文件
   - 使用 pytest 的 fixture 机制管理测试资源
   - 保持测试代码的整洁和可维护性

2. 测试用例完善
   - 为所有主要功能添加测试用例
   - 覆盖正常情况和边界情况
   - 测试错误处理和异常情况

3. 测试文档完善
   - 为每个测试函数添加详细的文档字符串
   - 说明测试目的和预期结果
   - 提供测试运行和维护指南

4. 测试工具集成
   - 配置 pytest 和 coverage 工具
   - 支持生成测试覆盖率报告
   - 提供测试环境设置指南

这些改进主要关注：
- 代码质量和可靠性
- 测试覆盖的完整性
- 测试代码的可维护性
- 开发体验的优化